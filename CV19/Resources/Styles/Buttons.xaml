<!--славарь ресурсов WPF-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CV19.Resources.Styles"
                    xmlns:fa="http://schemas.fontawesome.com/icons/">
    <Style x:Key ="BtnBase" TargetType="ButtonBase">
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource BtnBase}">
        <Setter Property="Background" Value="Red" />
    </Style>
    <Style x:Key ="PrimaryBtn" TargetType="Button"  BasedOn="{StaticResource BtnBase}">
    </Style>
    <Style x:Key ="DangerBtn" TargetType="Button"  BasedOn="{StaticResource BtnBase}">
        <Setter Property="Background" Value="Yellow" />
        <Setter Property="Foreground" Value="Green" />
    </Style>
    <!--скопировали весь стиль стандартной кнопки-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--задаем эфекты-->
   


    <!--ControlTemplate из стиля кнопки можно вынести как отдельный элемент-->
    <!--для выноса задаем ключ-->
    <ControlTemplate x:Key="CustomButtonControlTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <!--<Setter Property="Background" TargetName="border" Value="Blue"/>-->
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource WhiteBrush}"/>
                <Setter Property="Foreground"  Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="DarkBlue"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>-->
                <Setter Property="BorderBrush" TargetName="border" Value="Gray"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="DarkGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <DropShadowEffect x:Key="ShadowDepth1" ShadowDepth="1"/>
    <ControlTemplate x:Key="CheckButtonControlTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                SnapsToDevicePixels="true">
            <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                <fa:ImageAwesome Height="12" Icon="Solid_Check" Foreground="LightGreen" Margin="0,0,3,0" Effect="{StaticResource ShadowDepth1}"/>
                <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="border" Value="Blue"/>
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="Foreground"  Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="DarkBlue"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>-->
                <Setter Property="BorderBrush" TargetName="border" Value="Gray"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="DarkGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="RemuveButtonControlTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                SnapsToDevicePixels="true">
            <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                <fa:ImageAwesome x:Name="Icon" Height="12" Icon="Solid_Times" Foreground="#FFAEAE" Margin="0,0,3,0"  Effect="{StaticResource ShadowDepth1}"/>
                <ContentPresenter x:Name="contentPresenter" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
           
            <Trigger Property="IsMouseOver" Value="true">
                <!-- <Trigger Property="IsMouseOver" Value="true" ExitAction=""> ExitAction на выходе Сюда можно также вставить анимацию-->
                <!--<Trigger.EnterActions>
                <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ButtonRotate" Storyboard.TargetProperty="Angle"
                                                         From="0" To="360" By="0.1"  Duration="0:0:1"/>
                        </Storyboard>
                </BeginStoryboard>
                </Trigger.EnterActions>-->
                <Setter Property="Background" TargetName="border" Value="{StaticResource WhiteBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RedBrush}"/>
                <Setter Property="Foreground"  Value="Red"/>
                <Setter TargetName="Icon" Property="Foreground"  Value="{StaticResource RedBrush}"/>
            </Trigger>
            
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="WhiteSmoke"/>
                <Setter Property="BorderBrush" TargetName="border" Value="DarkRed"/>
                <Setter Property="Foreground"  Value="DarkRed"/>
                <Setter TargetName="Icon" Property="Foreground"  Value="OrangeRed"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>-->
                <Setter Property="BorderBrush" TargetName="border" Value="Gray"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="DarkGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--избавляемся от лишних ресурсов-->
    <!--<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>-->
    
    <!--<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>-->
    <!--<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>-->
    <Style x:Key="CustomButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource WhiteBrush}"/>
        <!--<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>-->
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <!--тем самым перенсли ControlTemplate-->
        <Setter Property="Template" Value="{StaticResource CustomButtonControlTemplate}">
            <!--<Setter Property="Template">
            <Setter.Value>
                
            </Setter.Value>-->
        </Setter>
    </Style>
    <Style x:Key="CheckButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource WhiteBrush}"/>
        <!--<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>-->
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <!--тем самым перенсли ControlTemplate-->
        <Setter Property="Template" Value="{StaticResource CheckButtonControlTemplate}">
            <!--<Setter Property="Template">
            <Setter.Value>
                
            </Setter.Value>-->
        </Setter>
    </Style>
    <Style x:Key="RemuveButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RedBrush}"/>
        <!--<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>-->
        <Setter Property="BorderBrush" Value="WhiteSmoke"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <!--тем самым перенсли ControlTemplate-->
        <Setter Property="Template" Value="{StaticResource RemuveButtonControlTemplate}">
            <!--<Setter Property="Template">
            <Setter.Value>
                
            </Setter.Value>-->
        </Setter>
    </Style>
    
</ResourceDictionary>