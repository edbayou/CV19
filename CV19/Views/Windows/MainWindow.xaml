<!--local меняем на xmlns:l-->
<!--xmlns подключает главные пространства именн.xmlns:x х- это псевданим простраства имен-->
<!--clr-namespace: подключаем сами простраства имен которые нам понадобятся с его помощью-->
<!--xmls: vm добовляем пространство имен вьюмодели,-->
<!--Title="MainWindow" свяжем свойство титл с титл нашей вьюмодели Title={Binding...}где {} расширение размедки, если не знаешь что писать то сначалло пишешь Path= и среда подскажет что можно написать в качестве свойства-->
<!--xmlsn:cmd добавляем пространство имен для наших команд-->
<!--xmlns:fa подключаем иконки-->
<!--xmlns:deconat="clr-namespace:CV19.Models.Deconat" указывае кде лежат модели во волеженной папке (пространство имен)-->
<!--xmlns:sys="clr-namespace:System;assembly=System.Runtime" если хотим менять отображение системных типок string int и т.п.-->
<!--xmlns:d="http://schemas.microsoft.com/expression/blend/2008" предназначин для работы с визуальным редактором в студии и в бленде имеет ряд оьрибутов
    начинаются с d: сдесь необходимо ууказать датаконтекст 
    mc:Ignorable="d" указывает компилятору игнарировать данное пространство имен,тк оно нужно иммено для визуализации в студии
     d:DataContext="{d:DesignInstance vm:CountriesStatisticViewModel}" теперь в кнопке мы сможем увидеть подсказки-->
<Window x:Class="CV19.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:cmd="clr-namespace:CV19.Infrastructure.Commands"
        xmlns:vm="clr-namespace:CV19.ViewModels"
        xmlns:deconat="clr-namespace:CV19.Models.Deconat"
        xmlns:l="clr-namespace:CV19" 
        xmlns:view="clr-namespace:CV19.Views"
        xmlns:oxy="http://oxyplot.org/wpf"
        xmlns:sys="clr-namespace:System;assembly=System.Runtime"
        xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        
        mc:Ignorable="d"
        
        
        DataContext="{vm:MainWindowViewModel}"
      
        Title="{Binding Title}" 
       
          Height="450" Width="800"
        >
    <!-- DataContext="{vm:MainWindowViewModel}"-->
    <Window.InputBindings>
        <KeyBinding Modifiers="Ctrl" Key="Q" Command="{Binding CloseApplicationCommand}"/>
    </Window.InputBindings>
    
    <!--на любом уровне разметки мы можем объявить ресурсы-->
    <Window.Resources>
        <cmd:CloseApplicationCommand x:Key="CloseApplicationCommand"/>

    </Window.Resources>
    <!--тк viewmodel наследуем от MarkupExtension можем задать контекст в <Window ...>-->
    <!--<Window.DataContext>
        дата контекст иерархичский и применяется в зависимости от места объявления если в Window то применяется на все окно
        <vm:MainWindowViewModel/>
    </Window.DataContext>-->
    <!--<Grid>
        UpdateSourceTrigger=PropertyChanged обнавляет элемент при изменении
        <TextBox HorizontalAlignment="Left" 
                 Margin="88,49"
                 Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" 
                 TextWrapping="Wrap" 
                 VerticalAlignment="Top" 
                 Width="312"/>

    </Grid>-->
    <!--вместо грида используем док панель, она позволяет притягвать содержимое к соответствующим краям, и последний элемент растягивается на оставшееся пространство-->
    <DockPanel>
        <!-- DockPanel.Dock="Top" расположение в докпанеле-->
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Файл">
                <!--<MenuItem Header="Выход" Command="{Binding CloseApplicationCommand}"></MenuItem>-->
                <!--алтернативный способ задовать команды-->
                <!--<MenuItem Header="Выход">
                    <MenuItem.Command>
                        <cmd:CloseApplicationCommand/>
                    </MenuItem.Command>
                </MenuItem>
            </MenuItem>-->
                <!--используем команду как ресурс-->
                <!--<MenuItem Header="Выход" Command="{StaticResource CloseApplicationCommand}"/>-->
                <MenuItem Header="Выход" Command="{Binding CloseApplicationCommand}"/>
            </MenuItem>
            <MenuItem Header="Помощь">
                <MenuItem Header="О программе"></MenuItem>
            </MenuItem>
          
        </Menu>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem MinWidth="150" MaxWidth="300">
                <TextBlock Text="{Binding Status}"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Width="120" Height="14" Value="30"/>
            </StatusBarItem>
            <StatusBarItem Content="{Binding SelectedPageIndex}">
            </StatusBarItem>
        </StatusBar>
        <!--так как нам надо растянуть табконтрол на все оставшееся пространство пишем его в конце-->
        <TabControl SelectedIndex="{Binding SelectedPageIndex}" TabStripPlacement="Bottom">
            <TabItem Header="Статистика">
                <!--указываем на вью модель для представления-->
                <view:CountryStatisticView DataContext="{Binding CountriesStatistic}" /> 
            </TabItem>
            <!--студенты-->
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <!--вставка картинки-->
                        <fa:ImageAwesome Icon="Regular_File" Height="13" Margin="0,0,5,0" Foreground="Red" />
                        <TextBlock Text="Студенты"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="250"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <GroupBox Grid.Column="0"  Header="Группы">
                        <DockPanel>
                            <DockPanel.Resources>
                                <!--реалзует задачи филтрации сортировки групировки данных-->
                                <CollectionViewSource x:Key="GroupsCollection" 
                                                      
                                                      Source="{Binding Groups}"
                                                      Filter="GroupsCollectionFilter">
                                    <!--<CollectionViewSource.SortDescriptions>
                                     --><!--сортировка--><!--
                                        <cm:SortDescription PropertyName="Name" Direction="Descending"/>
                                    </CollectionViewSource.SortDescriptions>
                                  <CollectionViewSource.GroupDescriptions>
                                        <PropertyGroupDescription PropertyName="Students.Count"/>
                                    </CollectionViewSource.GroupDescriptions>-->
                                </CollectionViewSource>
                            </DockPanel.Resources>
                            <DockPanel DockPanel.Dock="Top" Margin="0,3">
                                <fa:ImageAwesome Height="12" Icon="Solid_Search" Margin="3,0"/>
                                <TextBox Name="GroupNameFilterText"
                                         TextChanged="OnGroupsFilterTextChanged"/>
                            </DockPanel>
                            <!--Добавляем вертуализацию чтобы визуально не отоброжать все элементы и они не грузили память
                            т.к. если 1000000 записей каждый будет ждать чтобы его отрендерели что может никогда не произойти плюс навешивается обработчик событий-->
                            <UniformGrid DockPanel.Dock="Bottom" Rows="1" Margin="0,3">
                                <!--привязываем стили с иконками-->
                                <Button Content="Добавить" Padding="0,7" Command="{Binding CreateGroupCommand}" Style="{StaticResource CheckButtonStyle}"/>
                                <!--на удаление необходима указать параметрчтобы знать что удалять-->
                                <Button Content="Удалить" Command="{Binding DeleteGroupCommand}" Style="{StaticResource RemuveButtonStyle}" CommandParameter="{Binding SelectedGroup}"/>
                            </UniformGrid>
                            <!--<ListBoxDisplayMemberPath="Name" вместо ToString типа выводит название группы-->
                            <!--у списков исмользуется stacPanel  это дочерний элемент куда кладутся все элементы списка, у других DockPanel 
                             изменим у списков его контейнер элементов-->
                            <ListBox ItemsSource="{Binding Source={StaticResource GroupsCollection}}" SelectedIndex="0"
                                     SelectedItem="{Binding SelectedGroup}"
                                     VirtualizingPanel.IsContainerVirtualizable="True"
                                     VirtualizingPanel.IsVirtualizing="True"
                                     VirtualizingPanel.VirtualizationMode="Recycling">
                                <!--VirtualizingPanel. указывает как будут работать этот метод, идея заключается в том что она рендерит только те элементы которые видны на экране-->
                                <!--VirtualizingPanel.VirtualizationMode="Recycling" nтаки образом все контейнеры отображающие текущие элементы заного не создаются а меняется содержимое-->
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <!--помещаем нужную панель-->
                                        <!--<Grid></Grid>-->
                                        <!--<UniformGrid></UniformGrid>-->
                                        <!--для обеспечения виртуализации-->
                                        <VirtualizingStackPanel/>
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                                <ListBox.ItemTemplate>
                                    <!--<DataTemplate если данные не отображаются явно указывае тип DataType="decanat:Group"-->
                                    <DataTemplate>

                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{Binding Name}" Name="TextView"/>
                                            <TextBlock Text="{Binding Students.Count, StringFormat=' Студентов: [{0}] '}" Margin="3,0,0,0"/>
                                        </StackPanel>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding Students.Count}" Value="0">
                                                <Setter TargetName="TextView" Property="Foreground" Value="Red"></Setter>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </DockPanel>
                    </GroupBox>
                    <GroupBox Grid.Column="1" Header="{Binding SelectedGroup.Name, FallbackValue='Студенты', TargetNullValue='Группа не выбрана'}">
                        <DockPanel DockPanel.Dock="Top" Margin="0,3">
                            <DockPanel DockPanel.Dock="Top" Margin="0,3">
                                <fa:ImageAwesome Height="12" Icon="Solid_Search" Margin="3,0"/>
                                <!--UpdateSourceTrigger=PropertyChanged обнавляет свойство при изменении свойства текст тексового бокса-->
                                <TextBox Text="{Binding StudentFilterText, UpdateSourceTrigger=PropertyChanged}"/>
                            </DockPanel>
                            <DataGrid ItemsSource="{Binding SelectedGroupStudents}" 
                                  AutoGenerateColumns="False" 
                                  CanUserAddRows="True"
                                  GridLinesVisibility="Vertical"
                                  VerticalGridLinesBrush="DarkGray"
                                  AlternatingRowBackground="LightGray"
                                      EnableRowVirtualization="True"
                                      >
                                <!--для того чтобы объяснить датагриду как отображать сгруперованные данные-->
                                <!--<DataGrid.GroupStyle>
                                    <GroupStyle/>
                                </DataGrid.GroupStyle>-->
                                <DataGrid.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel/>
                                    </ItemsPanelTemplate>
                                </DataGrid.ItemsPanel>
                                <!--EnableRowVirtualization="True" свая собственная виртуализация строк  и колонок-->
                                <!--убираем горизантальную линию HorizontalGridLinesBrush="Transparent" == HorizontalGridLinesBrush={x:Null}-->
                            <!--либо второй вариант указываем какие линии надо убрать GridLinesVisibility="Vertical" -->
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Фамилия" Binding="{Binding Surname}" IsReadOnly="False"/>
                                <DataGridTextColumn Header="Имя"  Binding="{Binding Name}"  IsReadOnly="False"/>
                                <DataGridTextColumn Header="Отчество"  Binding="{Binding Patronymic}"  IsReadOnly="False"/>
                                <DataGridTextColumn Header="Рейтинг"  Binding="{Binding Rating}"  IsReadOnly="False"/>
                                <!--<DataGridTextColumn Header="Дата рождения"  Binding="{Binding Birthday, StringFormat=dd.MM.yyyy}"/>-->
                                <DataGridTemplateColumn Header="Дата рождения">

                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Birthday, StringFormat='dd.MM.yyy'}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                    <DataGridTemplateColumn.CellEditingTemplate>
                                        <DataTemplate>
                                            <DatePicker SelectedDate="{Binding Birthday}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellEditingTemplate>
                                </DataGridTemplateColumn>
                                <!--относительный источник данных RelativeSourceчтобы достучаться до данных иерархией выше добираемся до датагрид и задаем датаконтекст-->
                                <DataGridTextColumn Header="Группы" Binding="{Binding DataContext.SelectedGroup.Name, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                                <DataGridTextColumn Header="Заметки" Binding="{Binding Description}" Width="*"/>

                            </DataGrid.Columns>
                        </DataGrid>
                        </DockPanel>
                       
                    </GroupBox>
                </Grid>
            </TabItem>
            <TabItem Header="График" Width="100">
                <oxy:Plot>
                    <oxy:Plot.Axes>
                        <oxy:LinearAxis Position="Left"/>
                        <oxy:LinearAxis Position="Bottom"/>
                    </oxy:Plot.Axes>
                    <oxy:LineSeries Color="Red" ItemsSource="{Binding TestDataPoints}"
                                    DataFieldX="XValue" DataFieldY="YValue"/>
                </oxy:Plot>
            </TabItem>
            <TabItem Header="Тестирование визуализации" Visibility="Collapsed">
                <Grid>
                    <!--проверка режима разработки
                    <TextBlock Text="{Binding Source={x:Static l:App.IsDesignMode}}"/>-->
                    <ListBox HorizontalAlignment="Left" Width="200" Margin="30"
                             ItemsSource="{Binding TestStudent}"
                        VirtualizingPanel.IsContainerVirtualizable="True"
                                     VirtualizingPanel.IsVirtualizing="True"
                                     VirtualizingPanel.VirtualizationMode="Recycling">
                        <!--VirtualizingPanel. указывает как будут работать этот метод, идея заключается в том что она рендерит только те элементы которые видны на экране-->
                        <!--VirtualizingPanel.VirtualizationMode="Recycling" nтаки образом все контейнеры отображающие текущие элементы заного не создаются а меняется содержимое-->
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <!--помещаем нужную панель-->
                                <!--<Grid></Grid>-->
                                <!--<UniformGrid></UniformGrid>-->
                                <!--для обеспечения виртуализации-->
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBox.ItemTemplate>
                            <DataTemplate DataType="decanat:Student">
                                <Border BorderBrush="Blue" BorderThickness="1" CornerRadius="3" Padding="3">
                                    <Border.CacheMode>
                                        <BitmapCache RenderAtScale="5"/>
                                    </Border.CacheMode>
                                    <StackPanel>
                                        <TextBlock Text="{Binding Surname}" ToolTip="{Binding Name}"/>
                                        <TextBlock Text="{Binding Name}" ToolTip="{Binding Name}"/>
                                        <TextBlock Text="{Binding Patronymic, TargetNullValue=--}" ToolTip="{Binding Name}"/>
                                    </StackPanel>
                                </Border>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem Header="Файловая система">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="250"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <GroupBox Grid.Column="0" Header="Дирктории">
                        <GroupBox.Resources>
                            <!--задаем шаблон как ресурс-->
                            <HierarchicalDataTemplate DataType="{x:Type vm:DirectoryViewModel}"
                                                          ItemsSource="{Binding DirectoryItems}">
                                <StackPanel Orientation="Horizontal">
                                    <fa:ImageAwesome Height="12" Icon="Regular_Folder" Foreground="Yellow"/>
                                    <TextBlock Text="{Binding Name}" ToolTip="{Binding CreationTime}"/>
                                </StackPanel>
                            </HierarchicalDataTemplate>
                            <DataTemplate DataType="{x:Type vm:FileViewModel}">
                                <StackPanel Orientation="Horizontal" ToolTip="{Binding CreationTime}">
                                    <fa:ImageAwesome Height="12" Icon="Regular_File" Foreground="Blue"/>
                                    <TextBlock Text="{Binding Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </GroupBox.Resources>
                        <!--<ListBox ItemsSource="{Binding DiskRootDir.DirectoryItems}"
                                 
                                 SelectedItem="{Binding SelectedDirectoy}"
                                 SelectedIndex="0">
                            <ListBox.ItemTemplate>
                                --><!--добавляем подсказку дата создания--><!--
                                <DataTemplate DataType="vm:DirectoryViewModel">
                                    <TextBlock Text="{Binding Name}" ToolTip="{Binding CreationTime}"/>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>-->
                        <TreeView ItemsSource="{Binding DiskRootDir.DirectoryItems}">
                        <!--<TreeView ItemsSource="{Binding DiskRootDir.DirectoryItems}">-->
                            <!--<TreeView.ItemTemplate>
                                --><!--<DataTemplate DataType="vm:DirectoryViewModel">
                                    <TextBlock Text="{Binding Name}" ToolTip="{Binding CreationTime}"/>
                                </DataTemplate>-->
                                <!--Организуем иерархический шабол отображения данных--><!--
                                <HierarchicalDataTemplate DataType="vm:DirectoryViewModel"
                                                          ItemsSource="{Binding DirectoryItems}">
                                    <StackPanel Orientation="Horizontal">
                                        <fa:ImageAwesome Height="12" Icon="Regular_Folder" Foreground="Yellow"/>
                                        <TextBlock Text="{Binding Name}" ToolTip="{Binding CreationTime}"/>
                                    </StackPanel>

                                </HierarchicalDataTemplate>
                            </TreeView.ItemTemplate>-->
                            
                        </TreeView>
                    </GroupBox>
                    <GroupBox Grid.Column="1" Header="Файлы">
                        <!--<ListBox SelectedItem="{Binding SelectedDirectoy.Files, Mode=OneWay}">
                            
                        </ListBox>-->
                    </GroupBox>
                </Grid>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
<!-- кнопка снизу визуального редактора в виде юумажного листа - Отображение всех элементов управления перешелкивая его точки получаешь перезагружешь визуализацию если тупит-->