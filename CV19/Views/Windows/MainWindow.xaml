<!--local меняем на xmlns:l-->
<!--xmlns подключает главные пространства именн.xmlns:x х- это псевданим простраства имен-->
<!--clr-namespace: подключаем сами простраства имен которые нам понадобятся с его помощью-->
<!--xmls: vm добовляем пространство имен вьюмодели,-->
<!--Title="MainWindow" свяжем свойство титл с титл нашей вьюмодели Title={Binding...}где {} расширение размедки, если не знаешь что писать то сначалло пишешь Path= и среда подскажет что можно написать в качестве свойства-->
<!--xmlsn:cmd добавляем пространство имен для наших команд-->
<!--xmlns:fa подключаем иконки-->
<!--xmlns:deconat="clr-namespace:CV19.Models.Deconat" указывае кде лежат модели во волеженной папке (пространство имен)-->
<!--xmlns:sys="clr-namespace:System;assembly=System.Runtime" если хотим менять отображение системных типок string int и т.п.-->
<Window x:Class="CV19.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:cmd="clr-namespace:CV19.Infrastructure.Commands"
        xmlns:vm="clr-namespace:CV19.ViewModels"
        xmlns:deconat="clr-namespace:CV19.Models.Deconat"
        xmlns:l="clr-namespace:CV19" 
        xmlns:oxy="http://oxyplot.org/wpf"
        mc:Ignorable="d"
        xmlns:sys="clr-namespace:System;assembly=System.Runtime"
        Title="{Binding Title}" 
        Height="450" Width="800">
    <Window.InputBindings>
        <KeyBinding Modifiers="Ctrl" Key="Q" Command="{Binding CloseApplicationCommand}"/>
    </Window.InputBindings>
    <!--на любом уровне разметки мы можем объявить ресурсы-->
    <Window.Resources>
        <cmd:CloseApplicationCommand x:Key="CloseApplicationCommand"></cmd:CloseApplicationCommand>

    </Window.Resources>
    <Window.DataContext>
        <!--дата контекст иерархичский и применяется в зависимости от места объявления если в Window то применяется на все окно-->
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    <!--<Grid>
        UpdateSourceTrigger=PropertyChanged обнавляет элемент при изменении
        <TextBox HorizontalAlignment="Left" 
                 Margin="88,49"
                 Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" 
                 TextWrapping="Wrap" 
                 VerticalAlignment="Top" 
                 Width="312"/>

    </Grid>-->
    <!--вместо грида используем док панель, она позволяет притягвать содержимое к соответствующим краям, и последний элемент растягивается на оставшееся пространство-->
    <DockPanel>
        <!-- DockPanel.Dock="Top" расположение в докпанеле-->
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Файл">
                <!--<MenuItem Header="Выход" Command="{Binding CloseApplicationCommand}"></MenuItem>-->
                <!--алтернативный способ задовать команды-->
                <!--<MenuItem Header="Выход">
                    <MenuItem.Command>
                        <cmd:CloseApplicationCommand/>
                    </MenuItem.Command>
                </MenuItem>
            </MenuItem>-->
                <!--используем команду как ресурс-->
                <MenuItem Header="Выход" Command="{StaticResource CloseApplicationCommand}"/>
            </MenuItem>
            <MenuItem Header="Помощь">
                <MenuItem Header="О программе"></MenuItem>
            </MenuItem>
            <MenuItem Command="{Binding ChangeTebIndexCommand}" CommandParameter="-1" Header="Влево"></MenuItem>
            <MenuItem Command="{Binding ChangeTebIndexCommand}" CommandParameter="+1">
                <MenuItem.Header>
                    <fa:ImageAwesome Height="12" Icon="Regular_ArrowAltCircleRight"/>
                </MenuItem.Header>
            </MenuItem>
        </Menu>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem MinWidth="150" MaxWidth="300">
                <TextBlock Text="{Binding Status}"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Width="120" Height="14" Value="30"/>
            </StatusBarItem>
            <StatusBarItem Content="{Binding SelectedPageIndex}">
            </StatusBarItem>
        </StatusBar>
        <!--так как нам надо растянуть табконтрол на все оставшееся пространство пишем его в конце-->
        <TabControl SelectedIndex="{Binding SelectedPageIndex}">
            <TabItem Header="Разнородные данные" Height="20" VerticalAlignment="Top">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="250"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <GroupBox >
                        <!--задаем заголовок вручную так как применяются наши форматы-->
                        <GroupBox.Header>
                            <TextBlock Text="Элементы"/>
                        </GroupBox.Header>
                        <!--данные ресурсы действуют на содержимое групбокса-->
                        <GroupBox.Resources>
                            <ResourceDictionary Source="../../Resources/DataTemplates/CompositeListItemsDataTemplates.xaml"/>
                        </GroupBox.Resources>
                        <ListBox ItemsSource="{Binding CompositeColection}" SelectedItem="{Binding SelectedCompositeValue}">
                            <!--коментируем так как перекрывает верхние данные,нижние заданы в ручную-->
                            <!--<ListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}"/>
                                </DataTemplate>
                            </ListBox.ItemTemplate>-->
                        </ListBox>
                    </GroupBox>
                    <GroupBox Header="Выбранный элемент" Grid.Column="1">
                        <GroupBox.Resources>
                            <ResourceDictionary Source="../../Resources/DataTemplates/CompositeItemsControlDataTemplates.xaml"/>
                        </GroupBox.Resources>
                        <ContentControl Content="{Binding SelectedCompositeValue}"/>
                    </GroupBox>
                </Grid>
            </TabItem>
            <!--<TabItem Header="{Binding TestDataPoints.Count покажет количество точек или  TestDataPoints[2].XValue - покажет значение}" Width="100"></TabItem>-->
            <TabItem Header="График" Width="100">
                <oxy:Plot>
                    <oxy:Plot.Axes>
                        <oxy:LinearAxis Position="Left"/>
                        <oxy:LinearAxis Position="Bottom"/>
                    </oxy:Plot.Axes>
                    <oxy:LineSeries Color="Red" ItemsSource="{Binding TestDataPoints}"
                                    DataFieldX="XValue" DataFieldY="YValue"/>
                </oxy:Plot>
            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <!--вставка картинки-->
                        <fa:ImageAwesome Icon="Regular_File" Height="13" Margin="0,0,5,0" Foreground="Red" />
                        <TextBlock Text="Студенты"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <!--<ColumnDefinition Width="3*"/>
                        <ColumnDefinition Width="7*"/>-->
                        <ColumnDefinition Width="250"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <GroupBox Grid.Column="0"  Header="Группы">
                        <DockPanel>
                            <UniformGrid DockPanel.Dock="Bottom" Rows="1" Margin="0,3">
                                <UniformGrid.Resources>
                                    <!--если не указать явно стиль по ключу то он будет применен ко всем кнопкам-->
                                    <!--<Style x:Key="ButtonStyle" TargetType="Button">-->
                                    <!--<Style TargetType="Button">
                                        <Setter Property="Margin" Value="3,0"/>
                                        <Setter Property="Padding" Value="3,5"/>
                                        <Setter Property="Background" Value="White"/>
                                    </Style>-->
                                </UniformGrid.Resources>
                                <!--<Button Content="Добавить" Style="{StaticResource ButtonStyle}" Command="{Binding CreateGroupCommand}"/>-->
                                <!--<Button  Command="{Binding CreateGroupCommand}" Style="{StaticResource DangerBtn}">
                                   разворачиваем контент
                                    <StackPanel Orientation="Horizontal">
                                        <fa:ImageAwesome Height="12" Icon="Solid_Check" Foreground="LightGreen" Margin="0,0,3,0">
                                            <fa:ImageAwesome.Effect>
                                                <DropShadowEffect ShadowDepth="5"/>
                                            </fa:ImageAwesome.Effect>
                                        </fa:ImageAwesome>
                                        <TextBlock Text="Добавить"/>
                                    </StackPanel>
                                </Button>-->
                                <!--привязываем стили с иконками-->
                                <Button Content="Добавить" Padding="0,7" Command="{Binding CreateGroupCommand}" Style="{StaticResource CheckButtonStyle}"/>
                                <!--на удаление необходима указать параметрчтобы знать что удалять-->
                                <Button Content="Удалить" Command="{Binding DeleteGroupCommand}" Style="{StaticResource RemuveButtonStyle}" CommandParameter="{Binding SelectedGroup}"/>
                            </UniformGrid>
                            <!--<ListBoxDisplayMemberPath="Name" вместо ToString типа выводит название группы-->
                            <ListBox ItemsSource="{Binding Groups}" SelectedIndex="0"
                                     SelectedItem="{Binding SelectedGroup}">
                                <ListBox.ItemTemplate>
                                    <!--<DataTemplate если данные не отображаются явно указывае тип DataType="decanat:Group"-->
                                    <DataTemplate>
                                       
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{Binding Name}" Name="TextView"/>
                                            <TextBlock Text="{Binding Students.Count, StringFormat=' Студентов: [{0}] '}" Margin="3,0,0,0"/>
                                        </StackPanel>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding Students.Count}" Value="0">
                                                <Setter TargetName="TextView" Property="Foreground" Value="Red"></Setter>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </DockPanel>
                    </GroupBox>
                    <GroupBox Grid.Column="1" Header="{Binding SelectedGroup.Name, FallbackValue='Студенты', TargetNullValue='Группа не выбрана'}">
                        <DataGrid ItemsSource="{Binding SelectedGroup.Students}" 
                                  AutoGenerateColumns="False" 
                                  CanUserAddRows="True"
                                  GridLinesVisibility="Vertical"
                                  VerticalGridLinesBrush="DarkGray"
                                  AlternatingRowBackground="LightGray">
                            <!--убираем горизантальную линию HorizontalGridLinesBrush="Transparent" == HorizontalGridLinesBrush={x:Null}-->
                            <!--либо второй вариант указываем какие линии надо убрать GridLinesVisibility="Vertical" -->
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Фамилия" Binding="{Binding Surname}" IsReadOnly="False"/>
                                <DataGridTextColumn Header="Имя"  Binding="{Binding Name}"  IsReadOnly="False"/>
                                <DataGridTextColumn Header="Отчество"  Binding="{Binding Patronymic}"  IsReadOnly="False"/>
                                <DataGridTextColumn Header="Рейтинг"  Binding="{Binding Rating}"  IsReadOnly="False"/>
                                <!--<DataGridTextColumn Header="Дата рождения"  Binding="{Binding Birthday, StringFormat=dd.MM.yyyy}"/>-->
                                <DataGridTemplateColumn Header="Дата рождения">
                                    <!--<DataGridTemplateColumn.CellTemplate>
                                        -->
                                    <!--конфигурируем дататемплейт на работу с типом данных DataType="deconat:Student"-->
                                    <!--
                                        <DataTemplate DataType="deconat:Student">
                                            <DatePicker SelectedDate="{Binding Birthday}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>-->
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Birthday, StringFormat='dd.MM.yyy'}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                    <DataGridTemplateColumn.CellEditingTemplate>
                                        <DataTemplate>
                                            <DatePicker SelectedDate="{Binding Birthday}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellEditingTemplate>
                                </DataGridTemplateColumn>
                                <!--относительный источник данных RelativeSourceчтобы достучаться до данных иерархией выше добираемся до датагрид и задаем датаконтекст-->
                                <DataGridTextColumn Header="Группы" Binding="{Binding DataContext.SelectedGroup.Name, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                                <DataGridTextColumn Header="Заметки" Binding="{Binding Description}" Width="*"/>

                            </DataGrid.Columns>
                        </DataGrid>
                    </GroupBox>
                </Grid>
            </TabItem>
            <TabItem Header="Стили кнопок">
                <Grid>
                    <!--Style="{StaticResource CheckButtonStyle}"-->
                    <Button 
                        
                            Style="{StaticResource CustomButtonStyle}"
                            Content="Button" HorizontalAlignment="Left" 
                            Margin="162,61,0,0" VerticalAlignment="Top" Width="75"
                            RenderTransformOrigin="0.5,0.5" >
                        <Button.Background>
                            <SolidColorBrush Color="White" x:Name="ButtonBrush"/>
                        </Button.Background>
                        <Button.RenderTransform>
                            <RotateTransform x:Name="ButtonRotate"/>
                        </Button.RenderTransform>
                        <!--у маиой кнопки татже есть тригеры-->
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.Click">
                                <!--запуск анимации, раскадровка-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--From="0" с какого значение меняем по какое To="360" By="0.1"  мажно указать шаг,Duration="0:0:3" длительность ч,м,с-->
                                        <DoubleAnimation Storyboard.TargetName="ButtonRotate" Storyboard.TargetProperty="Angle"
                                                         From="0" To="360" By="0.1"  Duration="0:0:1"/>
                                        <!--можно указать цветовую анимацию ColorAnimation указать начальный и конечный цвет-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Button.MouseEnter">
                                <!--запуск анимации, раскадровка-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--From="0" с какого значение меняем по какое To="360" By="0.1"  мажно указать шаг,Duration="0:0:3" длительность ч,м,с-->
                                        <ColorAnimation Storyboard.TargetName="ButtonBrush" Storyboard.TargetProperty="Color"
                                                        To="Red" Duration="0:0:1"/>
                                        <!--можно указать цветовую анимацию ColorAnimation указать начальный и конечный цвет-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Button.MouseLeave">
                                <!--запуск анимации, раскадровка-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--From="0" с какого значение меняем по какое To="360" By="0.1"  мажно указать шаг,Duration="0:0:3" длительность ч,м,с-->
                                        <ColorAnimation Storyboard.TargetName="ButtonBrush" Storyboard.TargetProperty="Color"
                                                         To="White" Duration="0:0:1"/>
                                        <!--можно указать цветовую анимацию ColorAnimation указать начальный и конечный цвет-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>
                    <Button Content="Button" HorizontalAlignment="Left" Margin="277,51,0,0" VerticalAlignment="Top"/>
                    <!--RenderTransformOrigin="0.5,0.5" задаем точку относительно которой будет выполняться анимация
                    диапазон от 0 до 1-->
                </Grid>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
<!-- кнопка снизу визуального редактора в виде юумажного листа - Отображение всех элементов управления перешелкивая его точки получаешь перезагружешь визуализацию если тупит-->